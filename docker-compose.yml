services:
  # Database services
  settings-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: settings
    ports:
      - "5432:5432"
    volumes:
      - settings-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  payment-data-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_data
    ports:
      - "5433:5432"
    volumes:
      - payment-data-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kafka services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5

  init-kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment-requests --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "


  # Application services
  settings-service:
    build:
      context: .
      dockerfile: packages/settings-service/Dockerfile
    environment:
      DB_HOST: settings-db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: settings
    ports:
      - "3000:3000"
    volumes:
      - ./packages/settings-service:/app/packages/settings-service
      - ./packages/shared:/app/packages/shared
      - /app/packages/settings-service/node_modules
      - /app/packages/shared/node_modules
    depends_on:
      settings-db:
        condition: service_healthy

  payment-processor:
    build:
      context: .
      dockerfile: packages/payment-processor/Dockerfile
    environment:
      KAFKA_BROKERS: kafka:29092
    ports:
      - "3002:3002"
    volumes:
      - ./packages/payment-processor:/app/packages/payment-processor
      - ./packages/shared:/app/packages/shared
      - /app/packages/payment-processor/node_modules
      - /app/packages/shared/node_modules
    depends_on:
      kafka:
        condition: service_healthy

  payment-data:
    build:
      context: .
      dockerfile: packages/payment-data/Dockerfile
    environment:
      DB_HOST: payment-data-db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: payment_data
      KAFKA_BROKERS: kafka:29092
    ports:
      - "3001:3001"
    volumes:
      - ./packages/payment-data:/app/packages/payment-data
      - ./packages/shared:/app/packages/shared
      - /app/packages/payment-data/node_modules
      - /app/packages/shared/node_modules
    depends_on:
      payment-data-db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  dashboard:
    build:
      context: .
      dockerfile: packages/dashboard/Dockerfile
    environment:
      NEXTAUTH_URL: http://localhost:8080
      NEXTAUTH_SECRET: your-secret-key-here # Change this in production
      SETTINGS_SERVICE_URL: http://settings-service:3000
      PAYMENT_DATA_SERVICE_URL: http://payment-data:3001
      NODE_ENV: development
      WATCHPACK_POLLING: "true"
    ports:
      - "8080:8080"
    volumes:
      - ./packages/dashboard:/app/packages/dashboard
      - /app/packages/dashboard/node_modules
      - /app/packages/dashboard/.next
    command: npm run dev
    depends_on:
      - settings-service
      - payment-data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper

volumes:
  settings-db-data:
  payment-data-db-data: 